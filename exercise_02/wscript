
def options(opt):
    opt.load(['compiler_cxx'])
    opt.load(['waf_unit_test'])

def configure(conf):
    conf.load(['compiler_cxx'])
    conf.load(['waf_unit_test'])

def build(bld):
    bld.program(
        features  = ['cxx', 'cxxprogram'],
        includes  = bld.path.find_dir('inc').abspath(),
        source    = bld.path.ant_glob('src/*.cpp'),
        target    = 'TicTacToe',
        cxxflags  = ['-g', '-O0', '-Wall', '-Werror', '-std=c++11'],
    )

from waflib.Build import BuildContext
class Test(BuildContext):
    cmd = 'test'
    fun = 'test'

def test(test):
    test.program(
        features  = ['cxx', 'cxxprogram', 'test'],
        includes  = test.path.find_dir('inc').abspath(),
        source    = test.path.ant_glob('test/*.cpp'),
        target    = 'unittest',
        cxxflags  = ['-g', '-O0', '-Wall', '-Werror', '-std=c++11'],
        lib       = ['gtest', 'gtest_main']
    )
    def summary(test):
        from waflib import Logs
        lst=getattr(test,'utest_results',[])
        if lst:
            Logs.pprint('CYAN','execution summary')
            total=len(lst)
            tfail=len([x for x in lst if x[1]])
            Logs.pprint('CYAN','  tests that pass %d/%d'%(total-tfail,total))
            for(f,code,out,err)in lst:
                if not code:
                    Logs.pprint('GREEN','    %s'%f)
            if tfail != 0:
                Logs.pprint('RED','  tests that fail %d/%d'%(tfail,total))
                for(f,code,out,err)in lst:
                    if code:
                        Logs.pprint('RED','    %s'%f)
                from waflib.Errors import WafError
                raise WafError("test fail")
    test.add_post_fun(summary)
